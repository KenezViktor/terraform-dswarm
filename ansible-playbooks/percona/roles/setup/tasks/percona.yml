---
- name: "Setup Dirs tasks for percona"
  tags:
    - percona
  block:
    - name: "Create compose dir"
      ansible.builtin.file:
        path: "/shared/stacks/percona/compose"
        owner: "root"
        group: "root"
        mode: "0755"
        state: directory

    - name: "Create cert dirs"
      ansible.builtin.file:
        path: "/shared/stacks/percona/certs"
        owner: "1001"
        group: "1001"
        mode: "0755"
        state: directory

    - name: "Create data dirs"
      ansible.builtin.file:
        path: "/storage/{{ item }}/stacks/percona/data"
        owner: "1001"
        group: "1001"
        mode: "0755"
        state: directory
      with_items:
        - "{{ groups['worker-servers'] }}"

    - name: "Create config dirs"
      ansible.builtin.file:
        path: "/storage/{{ item }}/stacks/percona/config"
        owner: "1001"
        group: "1001"
        mode: "0755"
        state: directory
      with_items:
        - "{{ groups['worker-servers'] }}"

    - name: "Copy config"
      ansible.builtin.copy:
        src: "percona/custom.cnf"
        dest: "/storage/{{ item }}/stacks/percona/config/custom.cnf"
        owner: "1001"
        group: "1001"
        mode: "0644"
      with_items:
        - "{{ groups['worker-servers'] }}"
  when: inventory_hostname in groups['storage-servers'][0]

- name: "Create certs if percona cluster does not exists"
  tags:
    - percona
  block:
    - name: "Check for existing percona stack"
      ansible.builtin.shell:
        cmd: "docker stack ls | awk '{print $1}' | grep percona || true"
      register: output

    - name: "Check if certs exist"
      ansible.builtin.find:
        paths: "/shared/stacks/percona/certs"
        file_type: any
        hidden: true
      register: isEmpty

    - name: "Pull percona image for cert generation"
      community.docker.docker_image:
        name: "{{ percona_image }}"
        source: pull
        pull:
          platform: amd64
      when: output.stdout | length == 0

    - name: "Run cert creation"
      community.general.docker_container:
        name: percona-cert
        image: "{{ percona_image }}"
        command: ["mysql_ssl_rsa_setup", "-d", "/certs"]
        cleanup: yes
        detach: no
        volumes:
          - "/shared/stacks/percona/certs:/certs:rw"
      register: certout
      when: ( output.stdout | length == 0 ) and ( isEmpty.matched | int == 0 )
  when: inventory_hostname in groups['manager-servers'][0]

- name: "Copy percona env config and docker-compose"
  tags:
    - percona
  block:
    - name: "Copy .env config"
      ansible.builtin.template:
        src: "percona/.env.j2"
        dest: "/shared/stacks/percona/compose/.env.percona"
        owner: "root"
        group: "root"
        mode: "0644"

    - name: "Copy .env config"
      ansible.builtin.template:
        src: "percona/docker-compose.yml.j2"
        dest: "/shared/stacks/percona/compose/docker-compose.yml"
        owner: "root"
        group: "root"
        mode: "0644"
  when: inventory_hostname in groups['manager-servers'][0]
